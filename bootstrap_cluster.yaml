- hosts: localhost
  gather_facts: false
  tasks:
     - name: Set the variable cluster_env if not defined
       ansible.builtin.set_fact:
             cluster_env : 'all'
             admin_hostname: "admin"
       when: cluster_env is undefined

     - name: Setting hostvar for where to run the Host addition play
       ansible.builtin.set_fact:
          admin_hostname: "{{ item }}"
       when: ( hostvars[item].cluster_group_name == cluster_env )
       loop: "{{ groups['admin'] }}"


- hosts:  "{{ hostvars['localhost'].admin_hostname }}"
  become: "{{ root_user }}"
  tasks:
       - name: Perform a Registry Login on the bootstrap node
         cephadm_registry_login:
             state: login
             registry_url: "{{ registry_url }}"
             registry_username: "{{ registry_username }}"
             registry_password: "{{ registry_pass }}"
         when: use_registry_auth | bool


       - name: Check the node is already bootstrapped or not
         ansible.builtin.shell:
                 cmd: netstat -tnlp | grep 3300 | wc -l
         register: bootstrap_status


       - name: Print Output
         ansible.builtin.debug:
                 msg: "{{ bootstrap_status.stdout | int }}"

                 
       - name: Boostrap the cluster 
         cephadm_bootstrap:
             mon_ip: "{{ ansible_facts['all_ipv4_addresses'] | ansible.utils.ipaddr('10.74.253.45/21') | join() }}"
             image: "{{ cluster_image }}"
             monitoring: "{{ use_monitoring }}"
             cluster_network: "{{ cluster_network }}"
         when: ( bootstrap_status.stdout | int < 1 )

       - name: Get the cluster status 
         ansible.builtin.shell:
                 cmd: " cephadm shell ceph status"
         register: out
         changed_when: false

       - name: Print the cluster status
         ansible.builtin.debug:
                 msg: "{{ out.stdout }}"


